name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend API Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run backend tests
      working-directory: ./backend
      run: npm test
    
    - name: Generate test coverage
      working-directory: ./backend
      run: npm run test:coverage
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend Unit Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install all dependencies
      run: npm run install:all
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        echo $! > backend.pid
      env:
        NODE_ENV: test
    
    - name: Wait for backend to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:5000/health; do sleep 1; done'
    
    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm start &
        echo $! > frontend.pid
      env:
        CI: true
        BROWSER: none
    
    - name: Wait for frontend to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
    
    - name: Install Cypress dependencies
      working-directory: ./tests
      run: npm ci
    
    - name: Run Cypress tests
      working-directory: ./tests
      run: npm test
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_env_API_URL: http://localhost:5000
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: tests/cypress/screenshots
        retention-days: 7
    
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: tests/cypress/videos
        retention-days: 7
    
    - name: Stop servers
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) || true
        fi

  # Build and Deploy (optional)
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-build
        path: |
          frontend/build
          backend
        retention-days: 30

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Audit backend dependencies
      working-directory: ./backend
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Audit frontend dependencies
      working-directory: ./frontend
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Audit test dependencies
      working-directory: ./tests
      run: npm audit --audit-level moderate
      continue-on-error: true

  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Check backend code formatting
      working-directory: ./backend
      run: |
        if command -v npx prettier &> /dev/null; then
          npx prettier --check "**/*.js"
        fi
      continue-on-error: true
    
    - name: Check frontend code formatting
      working-directory: ./frontend
      run: |
        if command -v npx prettier &> /dev/null; then
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
        fi
      continue-on-error: true